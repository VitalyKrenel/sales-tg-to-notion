from telegram import Update, Chat
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import requests
import logging
import re
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)

logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.environ["TG_BOT_TOKEN"]
NOTION_TOKEN = os.environ["NOTION_INTEGRATION_SECRET"]
DATABASE_ID = os.environ["SALES_CRM_DATABASE_ID"]

headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": "2022-06-28",
    "Content-Type": "application/json",
}


def find_notion_page(client_name: str) -> str | None:
    norm_client = _normalize(client_name)
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"

    # 1) –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å page_size=100, –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    res = requests.post(url, headers=headers, json={})
    pages = res.json().get("results", [])

    for page in pages:
        # 2) —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—ë —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–∞ "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
        rich = page["properties"]["Name"]["title"]
        notion_name = "".join(rt.get("plain_text", "") for rt in rich)
        norm_page = _normalize(notion_name)

        # 3) —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º: client_in_page –∏–ª–∏ page_in_client
        if norm_client in norm_page or norm_page in norm_client:
            return page["id"]

    return None


def update_notion_page(page_id: str, summary: str):
    # 1. –°–Ω–∞—á–∞–ª–∞ GET, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—É—â–µ–µ Rich Text –∏–∑ –ø–æ–ª—è Lead status
    url_page = f"https://api.notion.com/v1/pages/{page_id}"
    page = requests.get(url_page, headers=headers).json()
    rich = page["properties"]["Lead status"]["rich_text"]

    # 2. –í—ã–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Å–∞–º–º–∞—Ä–∏ (dd/mm/yyyy –∏–ª–∏ dd/mm/yy) –∏–ª–∏ –±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è
    match = re.search(r"(\d{2}/\d{2}/\d{2,4})", summary)
    if match:
        raw = match.group(1)
        fmt = "%d/%m/%Y" if len(raw.split("/")[-1]) == 4 else "%d/%m/%y"
        call_date = datetime.strptime(raw, fmt).strftime("%Y-%m-%d")
    else:
        call_date = datetime.utcnow().strftime("%Y-%m-%d")

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ rich_text –¥–ª—è Lead status:
    #    —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—à–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å, –∑–∞—Ç–µ–º –≤–µ—Å—å —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç
    date_mention = {
        "type": "mention",
        "mention": {
            "type": "date",
            "date": {
                "start": call_date,
                "end": None
            }
        }
    }

    # 3b) —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –¥–∞—Ç—ã
    text_mention = {
        "type": "text",
        "text": {
            "content":
            " ü§ñ –ü—Ä–æ–≤–µ–ª–∏ –∑–≤–æ–Ω–æ–∫ —Å –ª–∏–¥–æ–º. –°–∞–º–º–∞—Ä–∏ –ø–æ –∑–≤–æ–Ω–∫—É –ø–µ—Ä–µ–Ω–µ—Å –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º.\n\n"
        }
    }

    new_rich = [date_mention, text_mention] + rich
    # 4. PATCH ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ Lead status
    data_page = {"properties": {"Lead status": {"rich_text": new_rich}}}
    requests.patch(url_page, headers=headers, json=data_page)

    # 5. POST ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–æ–ª–Ω—ã–º —Å–∞–º–º–∞—Ä–∏
    url_comments = "https://api.notion.com/v1/comments"
    data_comment = {
        "parent": {
            "page_id": page_id
        },
        "rich_text": [{
            "type": "text",
            "text": {
                "content": summary
            }
        }]
    }
    requests.post(url_comments, headers=headers, json=data_comment)


def _normalize(name: str) -> str:
    """
    –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, www., –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ '/', 
    –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã/—Å–ª—ç—à–∏.
    """
    n = name.lower().strip()
    n = re.sub(r'https?://(www\.)?', '', n)
    n = n.split('/', 1)[0]
    return n.rstrip('/')


def parse_call_message(text):
    if re.match(r"^\s*[\W_]*\s*(\d{2}/\d{2}/\d{2,4})", text):
        logger.info("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–∞.")
        return text.strip()
    else:
        logger.info(
            "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd/mm/yyyy –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –Ω–µ —Å–∞–º–º–∞—Ä–∏ –∑–≤–æ–Ω–∫–∞.")
        return None


def extract_client_name(chat_title: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç WeDo.
    –ò—â–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤–∏–¥–∞:
    - '–ö–ª–∏–µ–Ω—Ç + WeDo'
    - 'WeDo + –ö–ª–∏–µ–Ω—Ç'
    - '–ö–ª–∏–µ–Ω—Ç x WeDo'
    - 'WeDo x –ö–ª–∏–µ–Ω—Ç'
    - '–ö–ª–∏–µ–Ω—Ç & WeDo'
    - 'WeDo & –ö–ª–∏–µ–Ω—Ç'
    """
    if not chat_title:
        return None

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    pattern_client_first = r'^(.*?)\s*[\+x&]\s*WeDo\b'
    pattern_client_last = r'\bWeDo\s*[\+x&]\s*(.*?)$'

    match = re.search(pattern_client_first, chat_title, re.IGNORECASE)
    if match:
        return match.group(1).strip()

    match = re.search(pattern_client_last, chat_title, re.IGNORECASE)
    if match:
        return match.group(1).strip()

    return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat_type = message.chat.type
    if chat_type not in [Chat.GROUP, Chat.SUPERGROUP]:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Ç–∏–ø–∞ {chat_type}")
        return

    text = message.text
    logger.info("‚ñ∂Ô∏è Incoming message (first 2 paragraphs):\n%s",
                "\n\n".join(text.split("\n\n")[:2]))
    if not text:
        return

    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {message.chat.title} ‚Äî {text[:50]}")

    client_name = extract_client_name(message.chat.title or "")

    if not client_name:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —á–∞—Ç–∞: {message.chat.title}"
        )
        return

    logger.info("üéØ Extracted client_name from chat '%s': %s",
                message.chat.title, client_name)

    summary = parse_call_message(text)
    if client_name and summary:
        page_id = find_notion_page(client_name)
        if page_id:
            update_notion_page(page_id, summary)
            # await message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Notion –¥–ª—è {client_name}")
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Notion –¥–ª—è {client_name}")
        else:
            logger.info(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Notion")
    else:
        logger.info("üîú –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∞–º–º–∞—Ä–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")


# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     name, summary = parse_call_message(text)
#     # logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
#     # logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–º—è: {name}, —Ä–µ–∑—é–º–µ: {summary}")

#     if name:
#         page_id = find_notion_page(name)
#         if page_id:
#             update_notion_page(page_id, summary)
#             await update.message.reply_text(
#                 f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {name}")
#         else:
#             await update.message.reply_text(
#                 f"–ö–ª–∏–µ–Ω—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Notion.")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
